# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import lit.formats
from lit.TestingConfig import TestingConfig

config: TestingConfig

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()


# name: The name of this test suite.
config.name = 'OTF-CPT'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp']

config.excludes = ["datastructures"]

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
#config.test_exec_root = config.builddir + "/tests"

# test format
config.test_format = lit.formats.ShTest()

# Environment variables that should be inherited
environment_allowlist = [
    "INTEL_LICENSE_FILE",  # to run with icc INTEL_LICENSE_FILE must be set
    "PSM2_MULTI_EP",  # must be set to avoid PSM2 issues under oversubscription
    "HOSTNAME",  # the mpiexec-wrapper on claix-18 needs the HOSTNAME environment variable
    "FI_PROVIDER_PATH",
    "UCX_TLS",
    "HOME",
]
environment_allowprefixes = [
    "OMP_",
    "I_MPI_",
    "FI_",
    "MPIR_CVAR_",
    "OMPI_MCA_",
    "INTERNAL_",
] 
#if config.pass_prefixed_variables:
#    environment_allowprefixes += config.pass_prefixed_variables.split(";")

for envvar in os.environ:
    if config.forward_full_env:
        config.environment[envvar] = os.environ[envvar]
        continue
    if envvar in environment_allowlist:
        config.environment[envvar] = os.environ[envvar]
        continue
    for prefix in environment_allowprefixes:
        if envvar.startswith(prefix):
            config.environment[envvar] = os.environ[envvar]
            break

# pass all currently set environment variables that contain the word "MPI"
config.environment.update({k: v for k, v in os.environ.items() if "MPI" in k})


### Add feature-tested MPI features
#for k,v in config.lit_features.items():
#    if v:
#        config.available_features.add(k)
        
config.available_features.add(config.compiler_id)

# These must be added before the main %must-run substitution to have precedence over it. Otherwise the main one will
# replace the `%must-run` prefix.
config.substitutions.append(("%load_otfcpt_omp", f"env OMP_TOOL_LIBRARIES={config.otfcptomplib} "))
#config.substitutions.append(("%load_otfcpt", f"env OMP_TOOL_LIBRARIES={config.otfcptlib} LD_PRELOAD={config.otfcptlib} "))
config.substitutions.append(("%load_otfcpt", f"env OMP_TOOL_LIBRARIES={config.otfcptlib} "))
config.substitutions.append(("%otfcpt_options_stopped", "OTFCPT_OPTIONS=\"stopped=1 barrier=1\" "))
config.substitutions.append(("%otfcpt_options_dump_stopped", "OTFCPT_OPTIONS=\"verbose=1 stopped=1 metric_factor=1000\" "))
config.substitutions.append(("%mpirunnp", f"{config.mpiexec} {config.mpiexec_numproc_flag}"))

config.substitutions.append(("%metricfile", f"{config.testsrcdir}/expected-metrics.h"))
# Use tee to tap and save the MUST output passed to FileCheck. The file is
# written to the cmake build directory. It is placed in the directory
# corresponding to the source file as `<testsource_basename>.filecheck.in`.
filecheck_wiretap = "tee %basename_t.filecheck.in | "
filecheck_cmd = (filecheck_wiretap
                 + config.test_filecheck
                 + " --dump-input always")

config.substitutions.append(
    ("%FileCheck",
     filecheck_cmd)
)
