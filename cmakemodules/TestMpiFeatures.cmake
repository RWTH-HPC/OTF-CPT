macro (get_variable_int var output)
    string(TOLOWER "${var}" lvar)
    string(REGEX MATCH "int ${lvar} = [^;]+;" assignment "${output}")
    string(REGEX REPLACE "int ${lvar} = ([^;]+);" "\\1" TEST_${var} "${assignment}")
    unset(lvar)
    unset(assignment)
endmacro()

macro (get_variable_string var output)
    string(TOLOWER "${var}" lvar)
    string(REGEX MATCH "char ${lvar}\\[\\] = \"([^\"]+)\";" assignment "${output}")
    string(REGEX REPLACE "char ${lvar}\\[\\] = \"([^\"]+)\";" "\\1" TEST_${var} "${assignment}")
    unset(lvar)
    unset(assignment)
endmacro()

macro (set_mpi_test_features)
    string(REGEX MATCH "[0-9]+" major "${CMAKE_C_COMPILER_VERSION}")
    string(REGEX MATCH "[0-9]+\\.[0-9]+" majorminor "${CMAKE_C_COMPILER_VERSION}")
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
        set(comp "gcc")
    elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
        set(comp "icc")
    else()
        # Just use the lowercase of the compiler ID as fallback.
        string(TOLOWER "${CMAKE_C_COMPILER_ID}" comp)
    endif()
    set(TEST_COMPILER_FEATURE_LIST ${comp} ${comp}-${major} ${comp}-${majorminor} ${comp}-${CMAKE_C_COMPILER_VERSION} )

    # Conditionally set include flag only if MPI_C_HEADER_DIR is not empty (avoids bug with Intel oneAPI compilers)
    if(MPI_C_HEADER_DIR)
        set(mpi_include_flag "-I '${MPI_C_HEADER_DIR}'")
    else()
        set(mpi_include_flag "")
    endif()

    execute_process(
        COMMAND         bash "-c" "${CMAKE_C_COMPILER} ${mpi_include_flag} -E -P ${OTFCPT_SOURCE_DIR}/cmakemodules/mpi_implementation_version.c"
        OUTPUT_VARIABLE mpi_implementation_version_output
    )

    get_variable_int(MPI_VERSION "${mpi_implementation_version_output}")
    get_variable_int(MPI_SUBVERSION "${mpi_implementation_version_output}")

    get_variable_string(I_MPI_VERSION "${mpi_implementation_version_output}")
    if(TEST_I_MPI_VERSION)
        string(REGEX MATCH "[0-9]+" major "${TEST_I_MPI_VERSION}")
        string(REGEX MATCH "[0-9]+\\.[0-9]+" majorminor "${TEST_I_MPI_VERSION}")
        set(fullversion "${TEST_I_MPI_VERSION}")
        list(APPEND TEST_MPI_FEATURE_LIST "impi" "impi-${major}" "impi-${majorminor}" "impi-${fullversion}")
    endif()

    get_variable_string(MPICH_VERSION "${mpi_implementation_version_output}")
    if(TEST_MPICH_VERSION)
        string(REGEX MATCH "[0-9]+" major "${TEST_MPICH_VERSION}")
        string(REGEX MATCH "[0-9]+\\.[0-9]+" majorminor "${TEST_MPICH_VERSION}")
        set(fullversion "${TEST_MPICH_VERSION}")
        list(APPEND TEST_MPI_FEATURE_LIST "mpich" "mpich-${major}" "mpich-${majorminor}" "mpich-${fullversion}")
    endif()

    get_variable_int(OMPI_MAJOR_VERSION "${mpi_implementation_version_output}")
    if(TEST_OMPI_MAJOR_VERSION)
        get_variable_int(OMPI_MINOR_VERSION "${mpi_implementation_version_output}")
        get_variable_int(OMPI_RELEASE_VERSION "${mpi_implementation_version_output}")
        set(major "${TEST_OMPI_MAJOR_VERSION}")
        set(majorminor "${major}.${TEST_OMPI_MINOR_VERSION}")
        set(fullversion "${majorminor}.${TEST_OMPI_RELEASE_VERSION}")
        list(APPEND TEST_MPI_FEATURE_LIST "ompi" "ompi-${major}" "ompi-${majorminor}" "ompi-${fullversion}")
    endif()
    unset(mpi_implementation_version_output)
    unset(comp)
    unset(major)
    unset(majorminor)
    unset(fullversion)

    list(REMOVE_DUPLICATES TEST_COMPILER_FEATURE_LIST)
    set(TEST_COMPILER_FEATURES "[]")
    if(TEST_COMPILER_FEATURE_LIST)
        list(JOIN TEST_COMPILER_FEATURE_LIST "\", \"" TEST_COMPILER_FEATURES)
        set(TEST_COMPILER_FEATURES "[\"${TEST_COMPILER_FEATURES}\"]")
    endif()
    unset(TEST_COMPILER_FEATURE_LIST)
    message(STATUS "TEST_COMPILER_FEATURES = ${TEST_COMPILER_FEATURES}")

    list(REMOVE_DUPLICATES TEST_MPI_FEATURE_LIST)
    set(TEST_MPI_FEATURES "[]")
    if(TEST_MPI_FEATURE_LIST)
        list(JOIN TEST_MPI_FEATURE_LIST "\", \"" TEST_MPI_FEATURES)
        set(TEST_MPI_FEATURES "[\"${TEST_MPI_FEATURES}\"]")
    endif()
    unset(TEST_MPI_FEATURE_LIST)
    message(STATUS "TEST_MPI_FEATURES = ${TEST_MPI_FEATURES}")
endmacro()
